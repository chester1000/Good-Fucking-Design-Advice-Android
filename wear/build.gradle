apply plugin: 'com.android.application'

// read secret variables
// IMPORTANT: must be above `android {}` declaration
File secretPropsFile = file('../secret.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        safeLoad name as String, value
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.meeDamian.designAdvice"
        minSdkVersion 21
        targetSdkVersion 22
        versionCode getBuildVersion(defaultValue: 18)
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file(safeGet('STORE_FILE'))
            storePassword safeGet('STORE_PASSWORD')
            keyAlias safeGet('KEY_ALIAS')
            keyPassword safeGet('KEY_PASSWORD', safeGet('STORE_PASSWORD'))
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release as Object
            minifyEnabled true
            zipAlignEnabled true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.support:wearable:1.1.0'
    compile 'com.google.android.gms:play-services-wearable:7.0.0'
    compile 'com.android.support:support-annotations:22.0.0'
    compile project(':common')
}


// get variables && prevent crashing if missing
String safeGet(String name, String defaultValue = '') {
    hasProperty(name) ? project[name] : defaultValue
}

// loads variables from a file to `project` so they can be `safeGet`-ed later
def safeLoad(String name, Object value, Boolean override = false) {
    if (!hasProperty(name) || override)
        project.set name, value
}

Integer getBuildVersion(defaultVersion) {
    File verFile = file('../version.properties')

    if (!verFile.canRead())
        verFile.createNewFile()

    Properties props = new Properties()

    props.load new FileInputStream(verFile)
    String currentCodeVersion = props['VERSION_CODE']

    if (currentCodeVersion == null)
        currentCodeVersion = defaultVersion ?: android.defaultConfig.versionCode

    currentCodeVersion as Integer
}